<?xml version="1.0" encoding="UTF-8"?>
<includes>
	
	
	<!-- LibreELEC settings visual fix -->
	<variable name="GlobalFanartVar">
		<!--<value>_added_img/1280x720_black.png</value>-->
		<value>_added_img/100x100_black_90.png</value>
	</variable>
	
	
	
	<variable name="ItemRatingExternalOptional">
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID))">    $INFO[Window(Home).Property(ListItemHelper.rating.rottentomatoes.percent),   RT: ,%]$INFO[Window(Home).Property(ListItemHelper.rating.metacritic.percent),   MC: ,%]$INFO[Window(Home).Property(ListItemHelper.rating.imdb.percent),   IMDB: ,%]</value>
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(script.skin.helper.service) + !System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.IMDBNumber,Window(Home).Property(SkinHelper.ListItem.Imdbnumber))">    $INFO[Window(Home).Property(SkinHelper.ListItem.rottentomatoes.meter),   RT: ,%]$INFO[Window(Home).Property(SkinHelper.ListItem.metacritic.rating),   MC: ,%]$INFO[Window(Home).Property(SkinHelper.ListItem.Rating.percent.IMDB),   IMDB: ,%]</value>
		<value></value>
	</variable>
	
	<variable name="ItemRatingExternalOptionalRottenTomatoes">
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(Window(Home).Property(ListItemHelper.rating.rottentomatoes.percent))">$INFO[Window(Home).Property(ListItemHelper.rating.rottentomatoes.percent)]</value>
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(script.skin.helper.service) + !System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.IMDBNumber,Window(Home).Property(SkinHelper.ListItem.Imdbnumber)) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.rottentomatoes.meter))">$INFO[Window(Home).Property(SkinHelper.ListItem.rottentomatoes.meter)]</value>
		<value></value>
	</variable>
	<variable name="ItemRatingExternalOptionalMetacritic">
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(Window(Home).Property(ListItemHelper.rating.metacritic.percent))">$INFO[Window(Home).Property(ListItemHelper.rating.metacritic.percent)]</value>
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(script.skin.helper.service) + !System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.IMDBNumber,Window(Home).Property(SkinHelper.ListItem.Imdbnumber)) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.metacritic.rating))">$INFO[Window(Home).Property(SkinHelper.ListItem.metacritic.rating)]</value>
		<value></value>
	</variable>
	<variable name="ItemRatingExternalOptionalIMDB">
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(Window(Home).Property(ListItemHelper.rating.imdb.percent))">$INFO[Window(Home).Property(ListItemHelper.rating.imdb.percent)]</value>
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(script.skin.helper.service) + !System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.IMDBNumber,Window(Home).Property(SkinHelper.ListItem.Imdbnumber)) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Rating.percent.IMDB))">$INFO[Window(Home).Property(SkinHelper.ListItem.Rating.percent.IMDB)]</value>
		<value></value>
	</variable>
		<variable name="ItemRatingExternalOptionalRottenTomatoesAudience">
		<value condition="!String.IsEmpty(ListItem.IMDBNumber) + System.HasAddon(service.listitem.helper) + String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(Window(Home).Property(ListItemHelper.rating.rottentomatoes.audience)) + !String.IsEqual(Window(Home).Property(ListItemHelper.rating.rottentomatoes.audience),N/A)">$INFO[Window(Home).Property(ListItemHelper.rating.rottentomatoes.audience)]</value>
		<value></value>
	</variable>
	
	
	
	
	<variable name="ItemDurationHourLabel">
		<value condition="!String.IsEqual(System.Language,German)">h</value>
		<value> Std.</value>
	</variable>
	<variable name="ItemDurationMinutesLabel">
		<value condition="!String.IsEqual(System.Language,German)">min</value>
		<value> Min.</value>
	</variable>
	<variable name="ItemDuration">
		
		<value condition="!String.IsEmpty(ListItem.DBID)
											+ !String.IsEmpty(ListItem.Duration(h)) + !String.IsEmpty(ListItem.Duration(m)) 
											+ !String.IsEqual(ListItem.Duration(h),0) 
											+ !String.IsEqual(ListItem.Duration(m),0)">$INFO[ListItem.Duration(h)]$VAR[ItemDurationHourLabel] $INFO[ListItem.Duration(m)]$VAR[ItemDurationMinutesLabel]</value>
		
		<value condition="!String.IsEmpty(ListItem.DBID)
											+ !String.IsEmpty(ListItem.Duration(h)) + !String.IsEmpty(ListItem.Duration(m)) 
											+ !String.IsEqual(ListItem.Duration(h),0) 
											+ String.IsEqual(ListItem.Duration(m),0)">$INFO[ListItem.Duration(h)]$VAR[ItemDurationHourLabel]</value>
		
		<value condition="!String.IsEmpty(ListItem.DBID)
											+ !String.IsEmpty(ListItem.Duration(h)) + !String.IsEmpty(ListItem.Duration(m)) 
											+ String.IsEqual(ListItem.Duration(h),0) 
											+ !String.IsEmpty(ListItem.Duration(m))">$INFO[ListItem.Duration(m)]$VAR[ItemDurationMinutesLabel]</value>
		
		<value>$INFO[ListItem.Duration(mins)]$VAR[ItemDurationMinutesLabel]</value>
		<!--
		<value>$INFO[ListItem.Duration(mins)] $LOCALIZE[12391]       $INFO[ListItem.Duration(h)]:$INFO[ListItem.Duration(mm)] h</value>
		-->
	</variable>
	
	<variable name="ratingstars">
		
		<value condition="System.HasAddon(service.listitem.helper) 
											+ String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) 
											+ !String.IsEmpty(Window(Home).Property(ListItemHelper.rating.highestScaleTo10)) 
											+ !Skin.HasSetting(DisableBestScoreRating)">$VAR[ratingstarsExternal]</value>
		
		<value condition="String.IsEqual(ListItem.rating,0.0) | String.IsEqual(ListItem.rating,0.00) | String.IsEqual(ListItem.rating,0)">0.00</value>
		
		<value condition="!String.IsEqual(ListItem.rating,0.0) + !String.IsEqual(ListItem.rating,0.00) + !String.IsEqual(ListItem.rating,0) + String.StartsWith(ListItem.rating,0.)">0.25</value>
		
		<value condition="String.Contains(ListItem.rating,1.0)">0.50</value>
		<value condition="String.Contains(ListItem.rating,1.1)">0.50</value>
		<value condition="String.Contains(ListItem.rating,1.2)">0.50</value>
		
		<value condition="String.Contains(ListItem.rating,1.3)">0.75</value>
		<value condition="String.Contains(ListItem.rating,1.4)">0.75</value>
		<value condition="String.Contains(ListItem.rating,1.5)">0.75</value>
		<value condition="String.Contains(ListItem.rating,1.6)">0.75</value>
		<value condition="String.Contains(ListItem.rating,1.7)">0.75</value>
		
		<value condition="String.Contains(ListItem.rating,1.8)">1.00</value>
		<value condition="String.Contains(ListItem.rating,1.9)">1.00</value>
		<value condition="String.Contains(ListItem.rating,2.0)">1.00</value>
		<value condition="String.Contains(ListItem.rating,2.1)">1.00</value>
		<value condition="String.Contains(ListItem.rating,2.2)">1.00</value>
		
		<value condition="String.Contains(ListItem.rating,2.3)">1.25</value>
		<value condition="String.Contains(ListItem.rating,2.4)">1.25</value>
		<value condition="String.Contains(ListItem.rating,2.5)">1.25</value>
		<value condition="String.Contains(ListItem.rating,2.6)">1.25</value>
		<value condition="String.Contains(ListItem.rating,2.7)">1.25</value>

		<value condition="String.Contains(ListItem.rating,2.8)">1.50</value>
		<value condition="String.Contains(ListItem.rating,2.9)">1.50</value>
		<value condition="String.Contains(ListItem.rating,3.0)">1.50</value>
		<value condition="String.Contains(ListItem.rating,3.1)">1.50</value>
		<value condition="String.Contains(ListItem.rating,3.2)">1.50</value>
		
		<value condition="String.Contains(ListItem.rating,3.3)">1.75</value>
		<value condition="String.Contains(ListItem.rating,3.4)">1.75</value>
		<value condition="String.Contains(ListItem.rating,3.5)">1.75</value>
		<value condition="String.Contains(ListItem.rating,3.6)">1.75</value>
		<value condition="String.Contains(ListItem.rating,3.7)">1.75</value>

		<value condition="String.Contains(ListItem.rating,3.8)">2.00</value>
		<value condition="String.Contains(ListItem.rating,3.9)">2.00</value>
		<value condition="String.Contains(ListItem.rating,4.0)">2.00</value>
		<value condition="String.Contains(ListItem.rating,4.1)">2.00</value>
		<value condition="String.Contains(ListItem.rating,4.2)">2.00</value>
		
		<value condition="String.Contains(ListItem.rating,4.3)">2.25</value>
		<value condition="String.Contains(ListItem.rating,4.4)">2.25</value>
		<value condition="String.Contains(ListItem.rating,4.5)">2.25</value>
		<value condition="String.Contains(ListItem.rating,4.6)">2.25</value>
		<value condition="String.Contains(ListItem.rating,4.7)">2.25</value>

		<value condition="String.Contains(ListItem.rating,4.8)">2.50</value>
		<value condition="String.Contains(ListItem.rating,4.9)">2.50</value>
		<value condition="String.Contains(ListItem.rating,5.0)">2.50</value>
		<value condition="String.Contains(ListItem.rating,5.1)">2.50</value>
		<value condition="String.Contains(ListItem.rating,5.2)">2.50</value>
		
		<value condition="String.Contains(ListItem.rating,5.3)">2.75</value>
		<value condition="String.Contains(ListItem.rating,5.4)">2.75</value>
		<value condition="String.Contains(ListItem.rating,5.5)">2.75</value>
		<value condition="String.Contains(ListItem.rating,5.6)">2.75</value>
		<value condition="String.Contains(ListItem.rating,5.7)">2.75</value>

		<value condition="String.Contains(ListItem.rating,5.8)">3.00</value>
		<value condition="String.Contains(ListItem.rating,5.9)">3.00</value>
		<value condition="String.Contains(ListItem.rating,6.0)">3.00</value>
		<value condition="String.Contains(ListItem.rating,6.1)">3.00</value>
		<value condition="String.Contains(ListItem.rating,6.2)">3.00</value>
		
		<value condition="String.Contains(ListItem.rating,6.3)">3.25</value>
		<value condition="String.Contains(ListItem.rating,6.4)">3.25</value>
		<value condition="String.Contains(ListItem.rating,6.5)">3.25</value>
		<value condition="String.Contains(ListItem.rating,6.6)">3.25</value>
		<value condition="String.Contains(ListItem.rating,6.7)">3.25</value>

		<value condition="String.Contains(ListItem.rating,6.8)">3.50</value>
		<value condition="String.Contains(ListItem.rating,6.9)">3.50</value>
		<value condition="String.Contains(ListItem.rating,7.0)">3.50</value>
		<value condition="String.Contains(ListItem.rating,7.1)">3.50</value>
		<value condition="String.Contains(ListItem.rating,7.2)">3.50</value>
		
		<value condition="String.Contains(ListItem.rating,7.3)">3.75</value>
		<value condition="String.Contains(ListItem.rating,7.4)">3.75</value>
		<value condition="String.Contains(ListItem.rating,7.5)">3.75</value>
		<value condition="String.Contains(ListItem.rating,7.6)">3.75</value>
		<value condition="String.Contains(ListItem.rating,7.7)">3.75</value>

		<value condition="String.Contains(ListItem.rating,7.8)">4.00</value>
		<value condition="String.Contains(ListItem.rating,7.9)">4.00</value>
		<value condition="String.Contains(ListItem.rating,8.0)">4.00</value>
		<value condition="String.Contains(ListItem.rating,8.1)">4.00</value>
		<value condition="String.Contains(ListItem.rating,8.2)">4.00</value>
		
		<value condition="String.Contains(ListItem.rating,8.3)">4.25</value>
		<value condition="String.Contains(ListItem.rating,8.4)">4.25</value>
		<value condition="String.Contains(ListItem.rating,8.5)">4.25</value>
		<value condition="String.Contains(ListItem.rating,8.6)">4.25</value>
		<value condition="String.Contains(ListItem.rating,8.7)">4.25</value>

		<value condition="String.Contains(ListItem.rating,8.8)">4.50</value>
		<value condition="String.Contains(ListItem.rating,8.9)">4.50</value>
		<value condition="String.Contains(ListItem.rating,9.0)">4.50</value>
		<value condition="String.Contains(ListItem.rating,9.1)">4.50</value>
		<value condition="String.Contains(ListItem.rating,9.2)">4.50</value>
		
		<value condition="String.Contains(ListItem.rating,9.3)">4.75</value>
		<value condition="String.Contains(ListItem.rating,9.4)">4.75</value>
		<value condition="String.Contains(ListItem.rating,9.5)">4.75</value>
		<value condition="String.Contains(ListItem.rating,9.6)">4.75</value>
		<value condition="String.Contains(ListItem.rating,9.7)">4.75</value>

		<value condition="String.Contains(ListItem.rating,9.8)">5.00</value>
		<value condition="String.Contains(ListItem.rating,9.9)">5.00</value>
		
		<value condition="String.StartsWith(ListItem.rating,10)">5.00</value>
		<value>empty</value>
		
	</variable>
	
	<variable name="ratingstarsExternal">
	
		<value condition="String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0.0) | String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0.00) | String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0)">0.00</value>
		
		<value condition="!String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0.0) + !String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0.00) + !String.IsEqual(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0) + String.StartsWith(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),0.)">0.25</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.0)">0.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.1)">0.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.2)">0.50</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.3)">0.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.4)">0.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.5)">0.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.6)">0.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.7)">0.75</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.8)">1.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),1.9)">1.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.0)">1.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.1)">1.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.2)">1.00</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.3)">1.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.4)">1.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.5)">1.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.6)">1.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.7)">1.25</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.8)">1.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),2.9)">1.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.0)">1.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.1)">1.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.2)">1.50</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.3)">1.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.4)">1.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.5)">1.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.6)">1.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.7)">1.75</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.8)">2.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),3.9)">2.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.0)">2.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.1)">2.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.2)">2.00</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.3)">2.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.4)">2.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.5)">2.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.6)">2.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.7)">2.25</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.8)">2.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),4.9)">2.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.0)">2.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.1)">2.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.2)">2.50</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.3)">2.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.4)">2.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.5)">2.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.6)">2.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.7)">2.75</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.8)">3.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),5.9)">3.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.0)">3.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.1)">3.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.2)">3.00</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.3)">3.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.4)">3.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.5)">3.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.6)">3.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.7)">3.25</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.8)">3.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),6.9)">3.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.0)">3.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.1)">3.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.2)">3.50</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.3)">3.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.4)">3.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.5)">3.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.6)">3.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.7)">3.75</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.8)">4.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),7.9)">4.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.0)">4.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.1)">4.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.2)">4.00</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.3)">4.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.4)">4.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.5)">4.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.6)">4.25</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.7)">4.25</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.8)">4.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),8.9)">4.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.0)">4.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.1)">4.50</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.2)">4.50</value>
		
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.3)">4.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.4)">4.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.5)">4.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.6)">4.75</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.7)">4.75</value>

		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.8)">5.00</value>
		<value condition="String.Contains(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),9.9)">5.00</value>
		
		<value condition="String.StartsWith(Window(Home).Property(ListItemHelper.rating.highestScaleTo10),10)">5.00</value>
		
		<value>empty</value>
		
	</variable>
	
	<variable name="MediaFanartVar">
		
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(ListItem.Art(season.fanart))">$INFO[ListItem.Art(season.fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container.Art(season.fanart))">$INFO[Container.Art(season.fanart)]</value>
		
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container.Art(tvshow.fanart))">$INFO[Container.Art(tvshow.fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container.Art(artist.fanart))">$INFO[Container.Art(artist.fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container.Art(fanart))">$INFO[Container.Art(fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(ListItem.Art(album.fanart))">$INFO[ListItem.Art(album.fanart)]</value>
		
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container(8000).ListItem.Art(fanart)) + Control.HasFocus(8000)">$INFO[Container(8000).ListItem.Art(fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container(8001).ListItem.Art(fanart)) + Control.HasFocus(8001)">$INFO[Container(8001).ListItem.Art(fanart)]</value>
		<value condition="!Window.IsVisible(1171) + !String.IsEmpty(Container(8002).ListItem.Art(fanart)) + Control.HasFocus(8002)">$INFO[Container(8002).ListItem.Art(fanart)]</value>
		
		<!-- NOW PLAYING FANART -->
		<value condition="!String.IsEmpty(Player.Art(album.fanart))">$INFO[Player.Art(album.fanart)]</value>
		<value condition="!String.IsEmpty(Player.Art(fanart))">$INFO[Player.Art(fanart)]</value>
		<!--
		<value condition="!String.IsEmpty(ListItem.Art(album.fanart))">$INFO[ListItem.Art(album.fanart)]</value>
		-->
		
	</variable>
	
	<variable name="FanartThumbnail">
		
		<value condition="!String.IsEmpty(ListItem.Art(season.fanart))">$INFO[ListItem.Art(season.fanart)]</value>
		
		<value condition="!String.IsEmpty(ListItem.Art(tvshow.fanart))">$INFO[ListItem.Art(tvshow.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
		
		<!--
		<value condition="!String.IsEmpty(Container(8000).ListItem.Art(fanart)) + Control.HasFocus(8000)">$INFO[Container(8000).ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(Container(8001).ListItem.Art(fanart)) + Control.HasFocus(8001)">$INFO[Container(8001).ListItem.Art(fanart)]</value>
		<value condition="!String.IsEmpty(Container(8002).ListItem.Art(fanart)) + Control.HasFocus(8002)">$INFO[Container(8002).ListItem.Art(fanart)]</value>
		-->
		
	</variable>
	
	<variable name="BreadcrumbsVideoVar">
		<value condition="String.IsEmpty(Container.PluginName) + [Container.Content(Movies) | String.StartsWith(Container.folderpath,library://video/movies/) | String.StartsWith(Container.folderpath,videodb://movies)]">$LOCALIZE[20342]</value>
		<value condition="String.IsEmpty(Container.PluginName) + [Container.Content(MusicVideos) | String.StartsWith(Container.folderpath,library://video/musicvideos/) | String.StartsWith(Container.folderpath,videodb://musicvideos)]">$LOCALIZE[20389]</value>
		<value condition="String.IsEmpty(Container.PluginName) + [Container.Content(TVShows) | Container.Content(Seasons) | Container.Content(Episodes) | String.StartsWith(Container.folderpath,library://video/tvshows/) | String.StartsWith(Container.folderpath,videodb://tvshows)]">$LOCALIZE[20343]</value>
		<value>$LOCALIZE[3]</value>
	</variable>
	
	
	
	<variable name="BackgroundTypeVar">
		<value condition="String.IsEqual(Skin.String(BackgroundType),0)">Black  (1/6)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),1)">Circles Blue  (2/6)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),2)">Circles Grey  (3/6)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),3)">Polygons Blue  (4/6)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),4) | String.IsEmpty(Skin.String(BackgroundType))">(Default)   Polygons Grey  (5/6)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),5)">Grey  (6/6)</value>
	</variable>
	<variable name="BackgroundTypeNoVar">
		<value condition="String.IsEqual(Skin.String(BackgroundType),0)">0</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),1)">1</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),2)">2</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),3)">3</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),4) | String.IsEmpty(Skin.String(BackgroundType))">4</value>
		<value condition="String.IsEqual(Skin.String(BackgroundType),5)">5</value>
	</variable>
	
	<variable name="BackgroundCustomModeVar">
		<value condition="String.IsEqual(Skin.String(UseCustomBackground),0) | String.IsEmpty(Skin.String(UseCustomBackground))">(Default)   Disabled  (1/3)</value>
		<value condition="String.IsEqual(Skin.String(UseCustomBackground),1)">Single Image  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(UseCustomBackground),2)">Multiple Images  (3/3)</value>
	</variable>
	
	<variable name="BackgroundDarkenVar">
		<value condition="String.IsEqual(Skin.String(BackgroundDarkenStrength),0)">Disabled  (1/4)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundDarkenStrength),1) | String.IsEmpty(Skin.String(BackgroundDarkenStrength))">(Default)   Minimal  (2/4)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundDarkenStrength),2)">Medium  (3/4)</value>
		<value condition="String.IsEqual(Skin.String(BackgroundDarkenStrength),3)">Strong  (4/4)</value>
	</variable>
	
	
	
	<variable name="ExperimentalStartScreenEnabledDelayVar">
		<value condition="String.IsEqual(Skin.String(ExperimentalStartScreenEnabledDelay),0) | String.IsEmpty(Skin.String(ExperimentalStartScreenEnabledDelay))">(Default)   No Delay  (1/4)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalStartScreenEnabledDelay),1)">3 Seconds  (2/4)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalStartScreenEnabledDelay),2)">6 Seconds  (3/4)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalStartScreenEnabledDelay),3)">9 Seconds  (4/4)</value>
	</variable>
	
	
	
	<variable name="HomeScreenIdleUIFadeOut_Preset_1">
		<value>15</value>
	</variable>
	<variable name="HomeScreenIdleUIFadeOut_Preset_2">
		<value>30</value>
	</variable>
	<variable name="HomeScreenIdleUIFadeOut_Preset_3">
		<value>60</value>
	</variable>
	<variable name="HomeScreenIdleUIFadeOut_Preset_4">
		<value>120</value>
	</variable>
	<variable name="HomeScreenIdleUIFadeOutVar">
		<value condition="String.IsEqual(Skin.String(HomeScreenIdleUIFadeOut),0) | String.IsEmpty(Skin.String(HomeScreenIdleUIFadeOut))">(Default)   Disabled  (1/5)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenIdleUIFadeOut),1)">$VAR[HomeScreenIdleUIFadeOut_Preset_1] Seconds  (2/5)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenIdleUIFadeOut),2)">$VAR[HomeScreenIdleUIFadeOut_Preset_2] Seconds  (3/5)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenIdleUIFadeOut),3)">$VAR[HomeScreenIdleUIFadeOut_Preset_3] Seconds  (4/5)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenIdleUIFadeOut),4)">$VAR[HomeScreenIdleUIFadeOut_Preset_4] Seconds  (5/5)</value>
	</variable>
	
	
	
	
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_1">
		<value>3</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_2">
		<value>5</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_3">
		<value>7</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_4">
		<value>9</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_5">
		<value>12</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImage_Preset_6">
		<value>15</value>
	</variable>
	<variable name="CustomBackgroundMultipleTimePerImageVar">
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),0)">Only on window load  (1/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),1) | String.IsEmpty(Skin.String(CustomBackgroundMultipleTimePerImage))">(Default)   Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_1] Seconds  (2/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),2)">Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_2] Seconds  (3/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),3)">Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_3] Seconds  (4/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),4)">Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_4] Seconds  (5/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),5)">Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_5] Seconds  (6/7)</value>
		<value condition="String.IsEqual(Skin.String(CustomBackgroundMultipleTimePerImage),6)">Every $VAR[CustomBackgroundMultipleTimePerImage_Preset_6] Seconds  (7/7)</value>
	</variable>
	
	
	
	
	
	
	<variable name="VideoPlayerAudioLanguage">
		
		<!-- Workaround for madVR+LAVFilters language names which are long and ugly -->
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,german) | String.Contains(VideoPlayer.AudioLanguage,deu) | String.Contains(VideoPlayer.AudioLanguage,ger)]
											">ger</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,english) | String.Contains(VideoPlayer.AudioLanguage,englisch) | String.Contains(VideoPlayer.AudioLanguage,eng)]
											">eng</value>
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,spanish) | String.Contains(VideoPlayer.AudioLanguage,spanisch) | String.Contains(VideoPlayer.AudioLanguage,spa)]
											">spa</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,italian) | String.Contains(VideoPlayer.AudioLanguage,italienisch) | String.Contains(VideoPlayer.AudioLanguage,ita)]
											">ita</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,dutch) | String.Contains(VideoPlayer.AudioLanguage,niederländisch) | String.Contains(VideoPlayer.AudioLanguage,dut)]
											">dut</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,french) | String.Contains(VideoPlayer.AudioLanguage,französisch) | String.Contains(VideoPlayer.AudioLanguage,fre)]
											">fre</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.AudioLanguage,japanese) | String.Contains(VideoPlayer.AudioLanguage,japanisch) | String.Contains(VideoPlayer.AudioLanguage,jpn)]
											">jpn</value>
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.StartsWith(VideoPlayer.AudioLanguage,a:) | String.StartsWith(VideoPlayer.AudioLanguage,stereo ) | String.Contains(VideoPlayer.AudioLanguage,unk)]
											">und</value>
		
		<value condition="!String.Contains(Player.Process(pixformat),madVR)
											+ [String.StartsWith(VideoPlayer.AudioLanguage,unk)]
											">und</value>
		
		<value>$INFO[VideoPlayer.AudioLanguage]</value>
		
	</variable>
	
	
	
	<variable name="VideoPlayerSubtitlesLanguage">
		
		<!-- Workaround for madVR+LAVFilters language names which are long and ugly -->
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,german) | String.Contains(VideoPlayer.SubtitlesLanguage,deu) | String.Contains(VideoPlayer.SubtitlesLanguage,ger)]
											">ger</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,english) | String.Contains(VideoPlayer.SubtitlesLanguage,englisch) | String.Contains(VideoPlayer.SubtitlesLanguage,eng)]
											">eng</value>
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,spanish) | String.Contains(VideoPlayer.SubtitlesLanguage,spanisch) | String.Contains(VideoPlayer.SubtitlesLanguage,spa)]
											">spa</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,italian) | String.Contains(VideoPlayer.SubtitlesLanguage,italienisch) | String.Contains(VideoPlayer.SubtitlesLanguage,ita)]
											">ita</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,dutch) | String.Contains(VideoPlayer.SubtitlesLanguage,niederländisch) | String.Contains(VideoPlayer.SubtitlesLanguage,dut)]
											">dut</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,french) | String.Contains(VideoPlayer.SubtitlesLanguage,französisch) | String.Contains(VideoPlayer.SubtitlesLanguage,fre)]
											">fre</value>
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,japanese) | String.Contains(VideoPlayer.SubtitlesLanguage,japanisch) | String.Contains(VideoPlayer.SubtitlesLanguage,jpn)]
											">jpn</value>
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,no subtitles)]
											">–</value>
		
		<value condition="String.Contains(Player.Process(pixformat),madVR)
											+ [String.Contains(VideoPlayer.SubtitlesLanguage,auto) | String.Contains(VideoPlayer.SubtitlesLanguage,forced)]
											">auto</value>
		
		<value condition="!String.Contains(Player.Process(pixformat),madVR)
											+ [String.StartsWith(VideoPlayer.SubtitlesLanguage,unk)]
											">und</value>
		
		<value>$INFO[VideoPlayer.SubtitlesLanguage]</value>
		
	</variable>
	
	
	
	
	<variable name="ExperimentalPostMovieInfoDialogTypeVar">
		<value condition="String.IsEqual(Skin.String(ExperimentalPostMovieInfoDialogType),0) | String.IsEmpty(Skin.String(ExperimentalPostMovieInfoDialogType))">(Default)   Off   (1/3)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalPostMovieInfoDialogType),1)">Movie Info Dialog  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalPostMovieInfoDialogType),2)">Cinema Screen  (3/3)</value>
	</variable>
	
	
	
	<variable name="TrailerSearchLanguageTypeVar">
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),0) | String.IsEmpty(Skin.String(TrailerSearchLanguageType))">(Default)   English  (1/3)</value>
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),1)">Deutsch German  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),2)">KODI language: $INFO[System.Language]  (3/3)</value>
	</variable>
	
	<variable name="TrailerSearchLanguageString">
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),0) | String.IsEmpty(Skin.String(TrailerSearchLanguageType))">English </value>
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),1)">Deutsch German </value>
		<value condition="String.IsEqual(Skin.String(TrailerSearchLanguageType),2) + !String.IsEmpty(System.Language)">$INFO[System.Language] </value>
		<value></value>
	</variable>
	
	
	<variable name="TrailerSearchMethodVar">
		<value condition="String.IsEqual(Skin.String(TrailerSearchMethod),0) | String.IsEmpty(Skin.String(TrailerSearchMethod))">(Default)   Kodi YouTube Add-on  (1/2)</value>
		<value condition="String.IsEqual(Skin.String(TrailerSearchMethod),1)">Open in Default Web Browser  (2/2)</value>
	</variable>
	
	
	<variable name="SkinSettingsCompressionLevelLabel">
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),0) | String.IsEmpty(Skin.String(ExperimentalVolumeAmplificationLevel))">(Default)   +10dB   (1/6)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),1)">+12dB   (2/6)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),2)">+14dB   (3/6)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),3)">+16dB   (4/6)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),4)">+18dB   (5/6)</value>
		<value condition="String.IsEqual(Skin.String(ExperimentalVolumeAmplificationLevel),5)">+20dB   (6/6)</value>
	</variable>
	
	
	<variable name="HomeScreenKodiLogoVar">
		<value condition="String.IsEqual(Skin.String(HomeScreenKodiLogo),0) | String.IsEmpty(Skin.String(HomeScreenKodiLogo))">(Default)   Kodi logo  (1/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenKodiLogo),1)">Hidden  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenKodiLogo),2)">madVR logo  (3/3)</value>
	</variable>
	
	<variable name="HomeScreenSearchButtonVar">
		<value condition="String.IsEqual(Skin.String(HomeScreenSearchButton),0) | String.IsEmpty(Skin.String(HomeScreenSearchButton))">(Default)   Search dialog  (1/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenSearchButton),1)">Hidden  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeScreenSearchButton),2)">Direct video library search  (3/3)</value>
	</variable>
	
	<variable name="HomeDateTimeTypeVar">
		<value condition="String.IsEqual(Skin.String(HomeDateTimeType),0) | String.IsEmpty(Skin.String(HomeDateTimeType))">(Default)   Time only  (1/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeDateTimeType),1)">Date + Time  (2/3)</value>
		<value condition="String.IsEqual(Skin.String(HomeDateTimeType),2)">Hidden  (3/3)</value>
	</variable>
	
	<variable name="ForcePresetViewsMoviesCategoriesVARDefault">
		<value>500,508,508</value>
	</variable>
	<variable name="ForcePresetViewsMoviesCategoriesVAR">
		<value condition="!String.IsEmpty(Skin.String(ForcePresetViewsMoviesCategories))">$INFO[Skin.String(ForcePresetViewsMoviesCategories)]</value>
		<value>$VAR[ForcePresetViewsMoviesCategoriesVARDefault]</value>
	</variable>
	<variable name="ForcePresetViewsTvShowsCategoriesVARDefault">
		<value>508,508</value>
	</variable>
	<variable name="ForcePresetViewsTvShowsCategoriesVAR">
		<value condition="!String.IsEmpty(Skin.String(ForcePresetViewsTvShowsCategories))">$INFO[Skin.String(ForcePresetViewsTvShowsCategories)]</value>
		<value>$VAR[ForcePresetViewsTvShowsCategoriesVARDefault]</value>
	</variable>
	
	<variable name="isUhdScreenStringSuffix">
		<value condition="Integer.IsGreater(System.ScreenWidth,3100) | Integer.IsGreater(System.ScreenHeight,1700)">_uhd</value>
		<value></value>
	</variable>
	<variable name="isUhdScreenStringFolder">
		<value condition="Integer.IsGreater(System.ScreenWidth,3100) | Integer.IsGreater(System.ScreenHeight,1700)">uhd/</value>
		<value></value>
	</variable>
	
	
	<!--
	System.GetBool(videolibrary.showunwatchedplots)
	-->
	<variable name="VideoItemLabel2">
		<value condition="
											[Container.Content(Episodes) | Container.Content(Files) | 
											[String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) | String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp)]
											] 
											+ 
											[
											String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) | String.IsEqual(Container.SortMethod,$LOCALIZE[551]) | 
											[String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) | String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp)]
											] 
											+ !String.IsEmpty(ListItem.Duration)
											">$INFO[ListItem.Duration(mins),, min]</value>
		<value condition="
											[Container.Content(Episodes) | Container.Content(Files) | 
											[String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) | String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp)]
											] 
											+ 
											[
											String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) | String.IsEqual(Container.SortMethod,$LOCALIZE[551]) | 
											[String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) | String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp)]
											] 
											+ String.IsEmpty(ListItem.Duration)
											"></value>
		<value>$INFO[ListItem.Label2]</value>
	</variable>
	
	
	
	<variable name="TvShowEpisodePlayerArt">
		<value condition="VideoPlayer.Content(Episodes) + !String.IsEmpty(Player.Art(season.poster))">$INFO[Player.Art(season.poster)]</value>
		<value condition="VideoPlayer.Content(Episodes) + !String.IsEmpty(Player.Art(tvshow.poster))">$INFO[Player.Art(tvshow.poster)]</value>
		<value condition="VideoPlayer.Content(Movies) + !String.IsEmpty(Player.Art(poster))">$INFO[Player.Art(poster)]</value>
		<value>$INFO[Player.Art(thumb)]</value>
	</variable>
	
	<variable name="EpisodesViewLabel">
		
		<value condition="![String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-1/?tvshowid=)] + 
											![String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-2/?tvshowid=)] + 
											
											!String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) + !String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp) 
												+ !String.IsEmpty(ListItem.Title)">[COLOR=grey2]$INFO[ListItem.Episode,E,][/COLOR]   $INFO[ListItem.Title]</value>
		
		<value condition="![String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-1/?tvshowid=)] +
											![String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-2/?tvshowid=)] + 
												
												!String.StartsWith(Container.FolderPath,videodb://recentlyaddedepisodes) + !String.Contains(Container.FolderPath,special://skin/playlists/TV Shows - Special Lists/_mylist_episodes.xsp) 
												+ !String.IsEmpty(ListItem.Label)">$INFO[ListItem.Label]</value>
		
		<value condition="!ListItem.IsParentFolder + 
											[
												[String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-1/?tvshowid=)]
												|
												[String.StartsWith(Container.FolderPath,videodb://tvshows/titles/) + 
												String.Contains(Container.FolderPath,/-2/?tvshowid=)]
											]
												">[COLOR=grey]$INFO[ListItem.Season,S,]$INFO[ListItem.Episode, E,][/COLOR]   $INFO[ListItem.Title]</value>
		
		<value condition="!ListItem.IsParentFolder">$INFO[ListItem.TVShowTitle][COLOR=grey2]$INFO[ListItem.Season,  S,]$INFO[ListItem.Episode, E,][/COLOR]   $INFO[ListItem.Title]</value>
	</variable>
	
	
	
	
	<variable name="CinemaPostMovieContentUrl">
		<value condition="String.IsEqual(Skin.String(ExperimentalPostMovieInfoDialogType),1) + !String.IsEmpty(Window(home).Property(PostMovieDBID))">plugin://service.library.data.provider.lite?type=movie&amp;dbid=$INFO[Window(home).Property(PostMovieDBID)]</value>
		<value></value>
	</variable>
	
	<variable name="CinemaPostMovieCinemaScreenImage">
		<value condition="String.IsEqual(Skin.String(ExperimentalPostMovieInfoDialogType),2)">special://skin/backgrounds/cinema_the_end$VAR[isUhdScreenStringSuffix].png</value>
		<value></value>
	</variable>
	<variable name="ExperimentalPostMovieInfoDialogCinemaScreenTextVar">
		<value condition="!String.IsEmpty(Skin.String(ExperimentalPostMovieInfoDialogCinemaScreenText))">$INFO[Skin.String(ExperimentalPostMovieInfoDialogCinemaScreenText)]</value>
		<value></value>
	</variable>
	
	
	
	
	<variable name="MyListLabel">
		<!-- NOT on My List -->
		<value condition="[ String.IsEmpty(Window(home).Property(CinemaHelper.UserRating.Action)) + !String.IsEqual(ListItem.UserRating,1) ] 
																	| String.IsEqual(Window(home).Property(CinemaHelper.UserRating.Action),WatchListRemove)">My List</value>
		<!-- IS on  My List -->
		<value condition="[ String.IsEmpty(Window(home).Property(CinemaHelper.UserRating.Action)) + String.IsEqual(ListItem.UserRating,1) ]  
																	| String.IsEqual(Window(home).Property(CinemaHelper.UserRating.Action),WatchListAdd)">My List</value>
	</variable>
	
	
	
	<variable name="WatchedStateLabel">
		<!-- NOT Watched -->
		<value condition="[ String.IsEmpty(Window(home).Property(CinemaHelper.WatchedState.Action)) + String.IsEmpty(ListItem.PlayCount) ]  
																	| String.IsEqual(Window(home).Property(CinemaHelper.WatchedState.Action),SetNotWatched)">$LOCALIZE[16102]</value>
		<!-- IS Watched -->
		<value condition="[ [ String.IsEmpty(Window(home).Property(CinemaHelper.WatchedState.Action)) + !String.IsEmpty(ListItem.PlayCount) ] 
																	| String.IsEqual(Window(home).Property(CinemaHelper.WatchedState.Action),SetWatched) ] + !Control.HasFocus(98156)">$LOCALIZE[16102]</value>
		<value condition="[ [ String.IsEmpty(Window(home).Property(CinemaHelper.WatchedState.Action)) + !String.IsEmpty(ListItem.PlayCount) ] 
																	| String.IsEqual(Window(home).Property(CinemaHelper.WatchedState.Action),SetWatched) ] + Control.HasFocus(98156)">$LOCALIZE[16102]</value>
	</variable>
	
	<variable name="PlayButtonLabel">
		<value condition="!Container.Content(TVShows)">$LOCALIZE[208]</value>
		<value>$LOCALIZE[1024]</value>
	</variable>
	
	<!-- for: episodes view -->
	<variable name="EpisodesThumbnail">
		<value condition="!Skin.HasSetting(EpisodeSpoilerProtection)">$VAR[PosterThumb]</value>
		<value>$VAR[FanartThumbnail]</value>
	</variable>
	
	<!-- for: widget recently added episodes -->
	<variable name="EpisodesThumbnailRecentlyAdded">
		<value condition="!Skin.HasSetting(EpisodeSpoilerProtection) + !String.IsEqual(ListItem.Icon,DefaultVideo.png) + !String.IsEqual(ListItem.Icon,DefaultVideoCover.png)">$INFO[ListItem.Icon]</value>
		<value>$VAR[FanartThumbnail]</value>
	</variable>
	
	<variable name="WallViewLabel">
		<value condition="!Container.Content(Albums)">$INFO[ListItem.Label]</value>
		<value condition="Container.Content(Albums) + !String.IsEqual(ListItem.AlbumArtist,$LOCALIZE[340])">$INFO[ListItem.Label]$INFO[ListItem.AlbumArtist, – ,]</value>
		<value>$INFO[ListItem.Label]</value>
	</variable>
	
	
	
	<variable name="FavoritesThumbnail">
		<value condition="!String.IsEmpty(Listitem.Icon)">$INFO[Listitem.Icon]</value>
		<value>DefaultFolder.png</value>
	</variable>
	
	
	<variable name="FanartViewListItemTitle">
		<value condition="ListItem.IsPlaying">[COLOR=selected]$INFO[ListItem.Label][/COLOR]</value>
		<value>$INFO[ListItem.Label]</value>
	</variable>
	
	
	
	<variable name="DialogSelectSearchImage">
		<value condition="!String.IsEmpty(ListItem.Art(season.fanart))">$INFO[ListItem.Art(season.fanart)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(season.poster))">$INFO[ListItem.Art(season.poster)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(tvshow.poster))">$INFO[ListItem.Art(tvshow.poster)]</value>
		<value condition="!String.IsEmpty(ListItem.Art(poster))">$INFO[ListItem.Art(poster)]</value>
		<value>$INFO[ListItem.Icon]</value>
	</variable>
	
	<variable name="VideoOSDNextSubtitleLabel">
		<value condition="String.StartsWith(System.BuildVersion,17.7) |  String.StartsWith(System.BuildVersion,17.6 Git:20171126-13194ec)">$LOCALIZE[24012]</value>
		<value>$LOCALIZE[209] $LOCALIZE[462]</value>
	</variable>
	
	<variable name="ListItemStudioLabelShort">
		<value condition="String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(ListItem.Studio) + !String.IsEmpty(Window(Home).Property(ListItemHelper.studio.1)) + String.IsEmpty(Window(Home).Property(ListItemHelper.studio.2))">$INFO[Window(Home).Property(ListItemHelper.studio.1)]</value>
		<value condition="String.IsEqual(ListItem.DBID,Window(Home).Property(ListItemHelper.DBID)) + !String.IsEmpty(ListItem.Studio) + !String.IsEmpty(Window(Home).Property(ListItemHelper.studio.1)) + !String.IsEmpty(Window(Home).Property(ListItemHelper.studio.2))">$INFO[Window(Home).Property(ListItemHelper.studio.1)]  |  $INFO[Window(Home).Property(ListItemHelper.studio.2)]</value>
		<value>$INFO[ListItem.Studio]</value>
	</variable>
	<variable name="VideoPlayerStudioLabelOnlyFirst">
		<value condition="String.IsEqual(VideoPlayer.DBID,Window(Home).Property(CinemaHelper.player.DBID)) + !String.IsEmpty(VideoPlayer.Studio) + !String.IsEmpty(Window(Home).Property(CinemaHelper.player.studio.1))">$INFO[Window(Home).Property(CinemaHelper.player.studio.1)]</value>
		<value>$INFO[VideoPlayer.Studio]</value>
	</variable>
	
	<variable name="VideoFullScreenTitle">
		<value condition="!String.IsEmpty(Player.Title)">$INFO[Player.Title]</value>
		<value condition="String.IsEmpty(Player.Title)">$INFO[VideoPlayer.ChannelName]</value>
	</variable>
	
	<variable name="PVRRecordingPlot">
		<value condition="!String.IsEmpty(Container(50).ListItem.EpisodeName) + !String.IsEqual(Container(50).ListItem.EpisodeName,Container(50).ListItem.Plot)">$INFO[Container(50).ListItem.EpisodeName,,[CR][CR]]$INFO[Container(50).ListItem.Plot]</value>
		<value condition="!String.IsEmpty(Container(50).ListItem.EpisodeName) + String.IsEqual(Container(50).ListItem.EpisodeName,Container(50).ListItem.Plot)">$INFO[Container(50).ListItem.Plot]</value>
		<value>$INFO[Container(50).ListItem.Plot]</value>
	</variable>
	
	<variable name="PVRPlotText">
		<value condition="!String.IsEmpty(ListItem.EpisodeName) + !String.IsEqual(ListItem.EpisodeName,ListItem.Plot)">$INFO[ListItem.EpisodeName,,[CR]]$INFO[ListItem.Plot]</value>
		<value condition="!String.IsEmpty(ListItem.EpisodeName) + String.IsEqual(ListItem.EpisodeName,ListItem.Plot)">$INFO[ListItem.Plot]</value>
		<value>$INFO[ListItem.Plot]</value>
	</variable>
	
	<variable name="FullScreenMusicTrackArtist">
		<value condition="!String.IsEmpty(MusicPlayer.AlbumArtist)">$INFO[MusicPlayer.AlbumArtist]</value>
		<value>$INFO[MusicPlayer.Artist]</value>
	</variable>
	
	<variable name="FullScreenMusicNextTrackArtist">
		<value condition="!String.IsEmpty(MusicPlayer.offset(1).AlbumArtist)">$LOCALIZE[19031]: $INFO[MusicPlayer.offset(1).AlbumArtist,, – ]$INFO[MusicPlayer.offset(1).Title]</value>
		<value>$LOCALIZE[19031]: $INFO[MusicPlayer.offset(1).Artist,, – ]$INFO[MusicPlayer.offset(1).Title]</value>
	</variable>
	
</includes>
